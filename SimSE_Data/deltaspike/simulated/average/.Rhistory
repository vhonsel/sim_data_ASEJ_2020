project_sel = projects[projectIndex]
# perform query on DB to fetch only the selected project
query_str = paste('{"name" : ','"', project_sel,'"}', sep="")
project = con_project$find(query_str, fields='{"_id":1,"name":1}')
print(project)
# use the _id of the project to find the ID of the related version control system
query_str = paste('{"project_id" : {"$oid" : "', project$`_id`[1],'"}}', sep="")
vcssystem = con_vcssystem$find(query_str, fields='{"_id":1, "url":1}')
print(vcssystem)
# fetch all commits for the selected project
query_str = paste('{"vcs_system_id": {"$oid" : "', vcssystem$`_id`[1],'"}}',sep="")
commits = con_commit$find(query_str,fields ='{"_id":1,"author_date":1,"author_id":1,"committer_date":1,"committer_id":1,"labels":1,"linked_issue_ids":1,"message":1}')
# determine developer types
developers <- data.frame(commits$committer_date,commits$committer_id)
for (i in 1:nrow(developers)) {
developers$month[i] <- substr(developers$commits.committer_date[i],1,7)
}
for (i in 1:nrow(developers)) {
developers$NOC[i] <- sum(developers$month==developers$month[i]&developers$commits.committer_id==developers$commits.committer_id[i])
developers$commits[i] <- sum(developers$commits.committer_id==developers$commits.committer_id[i])
}
dev_stats <- developers[,c(2,3,4,5)]
dev_stats <- unique(dev_stats)
NOC <- nrow(commits)
for (i in 1:nrow(dev_stats)) {
if (dev_stats$commits[i]>=0.02*NOC&dev_stats$commits[i]<0.2*NOC){
dev_stats$role[i]<-"major"
}
else if (dev_stats$commits[i]>=0.2*NOC){
dev_stats$role[i]<-"core"
}
else {
dev_stats$role[i]<-"minor"
}
}
for (j in 1:nrow(dev_stats)) {
dev_stats$roleNOC[j] <- sum(dev_stats$NOC[dev_stats$role==dev_stats$role[j]&dev_stats$month==dev_stats$month[j]])
}
}
print(ggplot(data=dev_stats, aes(x=month, y=roleNOC, group=role, colour=role))
+ geom_line(size=1.5)
+ scale_x_discrete(breaks = c("1998-01","1998-07","1999-01","1999-07","2000-01","2000-07","2001-01","2001-07","2002-01",
"2002-07","2003-01","2003-07","2004-01","2004-07","2005-01","2005-07","2006-01","2006-07",
"2007-01","2007-07","2008-01","2008-07","2009-01","2009-07","2010-01","2010-07","2011-01",
"2011-07","2012-01","2012-07","2013-01","2013-07","2014-01","2014-07","2015-01","2015-07",
"2016-01","2016-07","2017-01","2017-07"))
+ scale_y_continuous("number")
+ theme(text = element_text(size=18),axis.text.x = element_text(hjust = 1, size=18),axis.text.y = element_text(hjust = 1, size=18),
legend.text = element_text(size = 18),legend.title=element_blank())
#+ scale_color_manual(values=c("#00CC33","#3399FF"))
+ theme(axis.text.x=element_text(angle=-270)))
#}
projects = c("storm")
#projects = c("zookeeper","xerces2-j","mahout","struts","kafka","cayenne","tika","ant-ivy","opennlp","pig","archiva","accumulo","tez","nutch","deltaspike","storm")
classifiers = c("knn3","rf")
error = data.frame("project"=character(), "classifier"=character(), "mr"=numeric(), stringsAsFactors = FALSE)
project_properties = data.frame("project"=character(), "commits"=numeric(), "ML_dev"=numeric(), "ML_user"=numeric(), stringsAsFactors = FALSE)
hmms_knn <- list()
hmms_rf <- list()
for( projectIndex in 1:length(projects)) {
project_sel = projects[projectIndex]
# perform query on DB to fetch only the selected project
query_str = paste('{"name" : ','"', project_sel,'"}', sep="")
project = con_project$find(query_str, fields='{"_id":1,"name":1}')
print(project)
# use the _id of the project to find the ID of the related version control system
query_str = paste('{"project_id" : {"$oid" : "', project$`_id`[1],'"}}', sep="")
vcssystem = con_vcssystem$find(query_str, fields='{"_id":1, "url":1}')
print(vcssystem)
# fetch all commits for the selected project
query_str = paste('{"vcs_system_id": {"$oid" : "', vcssystem$`_id`[1],'"}}',sep="")
commits = con_commit$find(query_str,fields ='{"_id":1,"author_date":1,"author_id":1,"committer_date":1,"committer_id":1,"labels":1,"linked_issue_ids":1,"message":1}')
# determine developer types
developers <- data.frame(commits$committer_date,commits$committer_id)
for (i in 1:nrow(developers)) {
developers$month[i] <- substr(developers$commits.committer_date[i],1,7)
}
for (i in 1:nrow(developers)) {
developers$NOC[i] <- sum(developers$month==developers$month[i]&developers$commits.committer_id==developers$commits.committer_id[i])
developers$commits[i] <- sum(developers$commits.committer_id==developers$commits.committer_id[i])
}
dev_stats <- developers[,c(2,3,4,5)]
dev_stats <- unique(dev_stats)
NOC <- nrow(commits)
for (i in 1:nrow(dev_stats)) {
if (dev_stats$commits[i]>=0.02*NOC&dev_stats$commits[i]<0.2*NOC){
dev_stats$role[i]<-"major"
}
else if (dev_stats$commits[i]>=0.2*NOC){
dev_stats$role[i]<-"core"
}
else {
dev_stats$role[i]<-"minor"
}
}
for (j in 1:nrow(dev_stats)) {
dev_stats$roleNOC[j] <- sum(dev_stats$NOC[dev_stats$role==dev_stats$role[j]&dev_stats$month==dev_stats$month[j]])
}
# plot commits per type
print(ggplot(data=dev_stats, aes(x=month, y=roleNOC, group=role, colour=role))
+ geom_line(size=1.5)
+ scale_x_discrete(breaks = c("1998-01","1998-07","1999-01","1999-07","2000-01","2000-07","2001-01","2001-07","2002-01",
"2002-07","2003-01","2003-07","2004-01","2004-07","2005-01","2005-07","2006-01","2006-07",
"2007-01","2007-07","2008-01","2008-07","2009-01","2009-07","2010-01","2010-07","2011-01",
"2011-07","2012-01","2012-07","2013-01","2013-07","2014-01","2014-07","2015-01","2015-07",
"2016-01","2016-07","2017-01","2017-07"))
+ scale_y_continuous("number")
+ theme(text = element_text(size=18),axis.text.x = element_text(hjust = 1, size=18),axis.text.y = element_text(hjust = 1, size=18),
legend.text = element_text(size = 18),legend.title=element_blank())
#+ scale_color_manual(values=c("#00CC33","#3399FF"))
+ theme(axis.text.x=element_text(angle=-270)))
#}
##########
}
View(error)
library(sna)
library(igraph)
projects <- c("giraph","gora","directory-fotress-core","jspwiki","zookeeper","commons-collections","commons-io","commons-lang","nutch","deltaspike")
#projects <- c("giraph")
results <- data.frame(project=character(), mode=character(), year=character(), nodes=numeric(), edges=numeric(), diameter=numeric(),
av_degree=numeric(), modularity=numeric(), av_w_degree=numeric(), communities = numeric(), densitiy = numeric(),
stringsAsFactors = FALSE)
########## using adjacency matrices ###########
for (j in 1:length(projects)) {
################# graph evolution ##################
setwd(paste("C:/Users/vhonsel/Documents/git/paper/ASE/SimSE_Data/",projects[j],"/empirical",sep=""))
noy <- length(list.files (pattern = "dot$"))
years <- c("01","02","03","04","05","06","07","08","09","10","11","12","13","14","15","16","17","18")
length(years) <- noy
for (i in 1:length(years)) {
dat = read.csv(paste("cc_",projects[j],"_",years[i],".csv", sep=""), header=FALSE)
adj_matrix = as.matrix(dat)
cc_graph <- graph_from_adjacency_matrix(adj_matrix,weighted=TRUE,mode="undirected")
n <- length(V(cc_graph))
e <- length(E(cc_graph))
d <- diameter(cc_graph, directed=F, weights=NA)
deg <- igraph::degree(cc_graph, v= V(cc_graph), mode="all")
av_deg <- sum(deg)/n
cl <- cluster_louvain(cc_graph,weights=E(cc_graph)$weight)
mod <- modularity(cl)
w_deg <- strength(cc_graph, mode="all")
av_w_deg <- sum(w_deg)/n
Communities <- length(cl)
#cluster_sizes <- sizes(cl)
den <- edge_density(cc_graph, loops = FALSE)
metrics <- list(project=projects[j], mode= "empirical", year = years[i], nodes=n, edges=e, diameter=d,
av_degree=av_deg, modularity=mod, av_w_degree=av_w_deg, communities=Communities, density = den)
results <- rbind(results,metrics,stringsAsFactors=FALSE)
#hist(deg, breaks =1:vcount(cc_graph)-1, main = "Histogram of node degree")
deg.dist <- degree_distribution(cc_graph, cumulative = T, mode="all")
#plot( x=0:max(deg), y=1-deg.dist, pch=19, cex=1.2, col="orange",xlab="Degree", ylab="Cumulative Frequency")
#plot(cl, cc_graph, vertex.label=NA)
}
################# simulated graph evolution ##################
setwd(paste("C:/Users/vhonsel/Documents/git/paper/ASE/SimSE_Data/",projects[j],"/simulated/default",sep=""))
for (i in 1:length(years)) {
edges = read.csv(paste("ChangeCoupling_Edges_", projects[j],"_",years[i],".csv", sep=""), header=TRUE)
nodes = read.csv(paste("ChangeCoupling_Nodes_",projects[j],"_",years[i],".csv", sep=""), header=TRUE)
cc_graph <- graph.data.frame(edges, directed=FALSE, vertices=nodes$Id)
n <- length(V(cc_graph))
e <- length(E(cc_graph))
d <- diameter(cc_graph, directed=F, weights=NA)
deg <- igraph::degree(cc_graph, v= V(cc_graph), mode="all")
av_deg <- sum(deg)/n
cl <- cluster_louvain(cc_graph,weights=E(cc_graph)$weight)
mod <- modularity(cl)
E(cc_graph)$weight <- edges$Weight
w_deg <- strength(cc_graph, mode="all")
av_w_deg <- sum(w_deg)/n
Communities <- length(cl)
#cluster_sizes <- sizes(cl)
den <- edge_density(cc_graph, loops = FALSE)
metrics <- list(project=projects[j], mode= "project-specific simulation", year = years[i], nodes=n, edges=e, diameter=d,
av_degree=av_deg, modularity=mod, av_w_degree=av_w_deg, communities=Communities, density = den)
results <- rbind(results,metrics,stringsAsFactors=FALSE)
#hist(deg, breaks =1:vcount(cc_graph)-1, main = "Histogram of node degree")
deg.dist <- degree_distribution(cc_graph, cumulative = T, mode="all")
#plot( x=0:max(deg), y=1-deg.dist, pch=19, cex=1.2, col="orange",xlab="Degree", ylab="Cumulative Frequency")
}
setwd(paste("C:/Users/vhonsel/Documents/git/paper/ASE/SimSE_Data/",projects[j],"/simulated/average",sep=""))
for (i in 1:length(years)) {
edges = read.csv(paste("ChangeCoupling_Edges_", projects[j],"_",years[i],".csv", sep=""), header=TRUE)
nodes = read.csv(paste("ChangeCoupling_Nodes_",projects[j],"_",years[i],".csv", sep=""), header=TRUE)
cc_graph <- graph.data.frame(edges, directed=FALSE, vertices=nodes$Id)
n <- length(V(cc_graph))
e <- length(E(cc_graph))
d <- diameter(cc_graph, directed=F, weights=NA)
deg <- igraph::degree(cc_graph, v= V(cc_graph), mode="all")
av_deg <- sum(deg)/n
cl <- cluster_louvain(cc_graph,weights=E(cc_graph)$weight)
mod <- modularity(cl)
E(cc_graph)$weight <- edges$Weight
w_deg <- strength(cc_graph, mode="all")
av_w_deg <- sum(w_deg)/n
Communities <- length(cl)
#cluster_sizes <- sizes(cl)
den <- edge_density(cc_graph, loops = FALSE)
metrics <- list(project=projects[j], mode= "average simulation", year = years[i], nodes=n, edges=e, diameter=d,
av_degree=av_deg, modularity=mod, av_w_degree=av_w_deg, communities=Communities, density = den)
results <- rbind(results,metrics,stringsAsFactors=FALSE)
#hist(deg, breaks =1:vcount(cc_graph)-1, main = "Histogram of node degree")
deg.dist <- degree_distribution(cc_graph, cumulative = T, mode="all")
#plot( x=0:max(deg), y=1-deg.dist, pch=19, cex=1.2, col="orange",xlab="Degree", ylab="Cumulative Frequency")
}
# commit bahavior
setwd(paste("C:/Users/vhonsel/Documents/git/paper/ASE/SimSE_Data/",projects[j],"/empirical",sep=""))
commits <- read.csv(paste("NoC_",projects[j],".csv",sep=""), header=TRUE)
setwd(paste("C:/Users/vhonsel/Documents/git/paper/ASE/SimSE_Data/",projects[j],"/simulated/default",sep=""))
commits_sim <- read.delim(paste("sim_noc_",projects[j],".txt",sep=""), sep = ",", header=TRUE)
commits_sim$year <- commits$year
commits_sim$no <- NULL
setwd(paste("C:/Users/vhonsel/Documents/git/paper/ASE/SimSE_Data/",projects[j],"/simulated/average",sep=""))
commits_sim_av <- read.delim(paste("sim_noc_",projects[j],".txt",sep=""), sep = ",", header=TRUE)
commits_sim_av$year <- commits$year
commits_sim_av$no <- NULL
library(reshape2)
reshaped <- melt(commits, id="year")
reshaped_sim <- melt(commits_sim, id="year")
reshaped_sim_av <- melt(commits_sim_av, id="year")
for (i in 1:nrow(reshaped)) {
if (reshaped$variable[i] == "core" || reshaped$variable[i] == "peripheral") {
reshaped$model[i] <- "onion model"
} else {
reshaped$model[i] <- "own model"
}
}
for (i in 1:nrow(reshaped_sim)) {
if (reshaped_sim$variable[i] == "core" || reshaped_sim$variable[i] == "peripheral") {
reshaped_sim$model[i] <- "onion model"
} else {
reshaped_sim$model[i] <- "own model"
}
}
for (i in 1:nrow(reshaped_sim_av)) {
if (reshaped_sim_av$variable[i] == "core" || reshaped_sim_av$variable[i] == "peripheral") {
reshaped_sim_av$model[i] <- "onion model"
} else {
reshaped_sim_av$model[i] <- "own model"
}
}
for (i in 1:nrow(reshaped)) {
reshaped$commits[i] <- sum(reshaped$value[reshaped$year[i]== reshaped$year & reshaped$model[i]==reshaped$model])
}
for (i in 1:nrow(reshaped_sim)) {
reshaped_sim$commits[i] <- sum(reshaped_sim$value[reshaped_sim$year[i]== reshaped_sim$year & reshaped_sim$model[i]==reshaped_sim$model])
}
for (i in 1:nrow(reshaped_sim_av)) {
reshaped_sim_av$commits[i] <- sum(reshaped_sim_av$value[reshaped_sim_av$year[i]== reshaped_sim_av$year & reshaped_sim_av$model[i]==reshaped_sim_av$model])
}
savedir <- file.path("C:/Users/vhonsel/Documents/git/paper/ASE/results/")
library(ggplot2)
results_project <- results[results$project==projects[j],]
nodes_plot <- ggplot(results_project, aes(year, nodes))
np <- nodes_plot + geom_line(aes(group=mode,color=mode),size=1.5)+ylim(0,max(results_project$nodes)+100)+theme_set(theme_gray(base_size = 20))
print(np)
#ggsave(np, file=paste(projects[j],"_nodes.png"), path = savedir)
dev.off()
edges_plot <- ggplot(results_project, aes(year, edges))
ep <- edges_plot + geom_line(aes(group=mode,color=mode),size=1.5)+ylim(0,max(results_project$edges)+1000)+theme_set(theme_gray(base_size = 20))
print(ep)
#ggsave(ep, file=paste(projects[j],"_edges.png"), path = savedir)
dev.off()
mod_plot <- ggplot(results_project, aes(year, modularity))
mp <- mod_plot + geom_line(aes(group=mode,color=mode),size=1.5)+ylim(0,1)+theme_set(theme_gray(base_size = 20))
print(mp)
#ggsave(mp, file=paste(projects[j],"_modularity.png"), path = savedir)
dev.off()
dia_plot <- ggplot(results_project, aes(year, diameter))
dp <- dia_plot + geom_line(aes(group=mode,color=mode),size=1.5)+ylim(0,max(results_project$diameter)+1)+theme_set(theme_gray(base_size = 20))
print(dp)
#ggsave(dp, file=paste(projects[j],"_diameter.png"), path = savedir)
dev.off()
deg_plot <- ggplot(results_project, aes(year, av_degree))
degp <- deg_plot + geom_line(aes(group=mode,color=mode),size=1.5)+ylim(0,max(results_project$av_degree)+10)+
ylab("average degree")+theme_set(theme_gray(base_size = 20))
print(degp)
#ggsave(degp, file=paste(projects[j],"_av_degree.png"), path = savedir)
dev.off()
wdeg_plot <- ggplot(results_project, aes(year, av_w_degree))
wp <- wdeg_plot + geom_line(aes(group=mode,color=mode),size=1.5)+ylim(0,max(results_project$av_w_degree)+10)+
ylab("average weighted degree")+theme_set(theme_gray(base_size = 20))
print(wp)
#ggsave(wp, file=paste(projects[j],"_av_w_degree.png"), path = savedir)
dev.off()
dens_plot <- ggplot(results_project, aes(year, density))
denp <- dens_plot + geom_line(aes(group=mode,color=mode),size=1.5)+ylim(0,1)+theme_set(theme_gray(base_size = 20))
print(denp)
#ggsave(denp, file=paste(projects[j],"_density.png"), path = savedir)
dev.off()
commits_plot <- ggplot(reshaped, aes(year, value,color=variable,linetype=model))
cp <- commits_plot +
geom_line(size=1.5)+
scale_color_discrete(name="role")+
scale_linetype_discrete(name="model")+
theme_set(theme_gray(base_size = 20))
print(cp)
#ggsave(cp, file=paste(projects[j],"_commits.png"), path = savedir)
dev.off()
commits_plot_sim <- ggplot(reshaped_sim, aes(year, value,color=variable,linetype=model))
cps <- commits_plot_sim +
geom_line(size=1.5)+
scale_color_discrete(name="role")+
scale_linetype_discrete(name="model")+
theme_set(theme_gray(base_size = 20))
print(cps)
#ggsave(cps, file=paste(projects[j],"_commits_simulated.png"), path = savedir)
dev.off()
#summarized commits
sum_plot <- ggplot(NULL, aes(year, commits))
soc <- sum_plot +
geom_line(data = reshaped, aes(color="blue"), size=1.5) +
geom_line(data = reshaped_sim[reshaped_sim$model=="own model",], aes(color="green"), size=1.5) +
geom_line(data = reshaped_sim_av[reshaped_sim_av$model=="own model",], aes(color="red"), size=1.5)+
scale_color_discrete(name = "mode", labels = c("empirical", "project-specific sim.", "average sim."))+
theme_set(theme_gray(base_size = 20))
print(soc)
#ggsave(soc, file=paste(projects[j],"_commits_summarized.png"), path = savedir)
dev.off()
}
library(caret)
error <- data.frame(project=character(), mode=character(), metric=character(), MAE=numeric(), MSE=numeric(), RMSE=numeric(), R2=numeric(),
stringsAsFactors = FALSE)
for (i in 1:length(projects)){
results_p <- results[results$project==projects[i],]
#av_degree
av_degree <- results_p[,c(2,3,7)]
empirical<-av_degree$av_degree[av_degree$mode=="empirical"]
predicted<-av_degree$av_degree[av_degree$mode=="project-specific simulation"]
predicted2 <- av_degree$av_degree[av_degree$mode=="average simulation"]
MAE=MAE(predicted,empirical)
d = empirical-predicted
MSE = mean((d)^2)
RMSE=RMSE(predicted, empirical)
R2=R2(predicted, empirical, form = "traditional")
sim_error <- list(project=projects[i], mode="project-specific",metric="av_degree",MAE=MAE,MSE=MSE,RMSE=RMSE,R2=R2)
error <- rbind(error,sim_error,stringsAsFactors=FALSE)
MAE=MAE(predicted2,empirical)
d = empirical-predicted2
MSE = mean((d)^2)
RMSE=RMSE(predicted2, empirical)
R2=R2(predicted2, empirical, form = "traditional")
sim_error <- list(project=projects[i], mode="average",metric="av_degree",MAE=MAE,MSE=MSE,RMSE=RMSE,R2=R2)
error <- rbind(error,sim_error,stringsAsFactors=FALSE)
#av_w_degree
av_w_degree <- results_p[,c(2,3,9)]
empirical<-av_w_degree$av_w_degree[av_w_degree$mode=="empirical"]
predicted<-av_w_degree$av_w_degree[av_w_degree$mode=="project-specific simulation"]
predicted2<-av_w_degree$av_w_degree[av_w_degree$mode=="average simulation"]
MAE=MAE(predicted,empirical)
d = empirical-predicted
MSE = mean((d)^2)
RMSE=RMSE(predicted, empirical)
R2=R2(predicted, empirical, form = "traditional")
sim_error <- list(project=projects[i],mode="project-specific", metric="av_w_degree",MAE=MAE,MSE=MSE,RMSE=RMSE,R2=R2)
error <- rbind(error,sim_error,stringsAsFactors=FALSE)
MAE=MAE(predicted2,empirical)
d = empirical-predicted2
MSE = mean((d)^2)
RMSE=RMSE(predicted2, empirical)
R2=R2(predicted2, empirical, form = "traditional")
sim_error <- list(project=projects[i], mode="average",metric="av_w_degree",MAE=MAE,MSE=MSE,RMSE=RMSE,R2=R2)
error <- rbind(error,sim_error,stringsAsFactors=FALSE)
#modularity
modularity <- results_p[,c(2,3,8)]
empirical<-modularity$modularity[modularity$mode=="empirical"]
predicted<-modularity$modularity[modularity$mode=="project-specific simulation"]
predicted2<-modularity$modularity[modularity$mode=="average simulation"]
MAE=MAE(predicted,empirical)
d = empirical-predicted
MSE = mean((d)^2)
RMSE=RMSE(predicted, empirical)
R2=R2(predicted, empirical, form = "traditional")
sim_error <- list(project=projects[i], mode="project-specific", metric="modularity",MAE=MAE,MSE=MSE,RMSE=RMSE,R2=R2)
error <- rbind(error,sim_error,stringsAsFactors=FALSE)
MAE=MAE(predicted2,empirical)
d = empirical-predicted2
MSE = mean((d)^2)
RMSE=RMSE(predicted2, empirical)
R2=R2(predicted2, empirical, form = "traditional")
sim_error <- list(project=projects[i], mode="average",metric="modularity",MAE=MAE,MSE=MSE,RMSE=RMSE,R2=R2)
error <- rbind(error,sim_error,stringsAsFactors=FALSE)
#density
density <- results_p[,c(2,3,11)]
empirical<-density$density[density$mode=="empirical"]
predicted<-density$density[density$mode=="project-specific simulation"]
predicted2<-density$density[density$mode=="average simulation"]
MAE=MAE(predicted,empirical)
d = empirical-predicted
MSE = mean((d)^2)
RMSE=RMSE(predicted, empirical)
R2=R2(predicted, empirical, form = "traditional")
sim_error <- list(project=projects[i],mode="project-specific",metric="density",MAE=MAE,MSE=MSE,RMSE=RMSE,R2=R2)
error <- rbind(error,sim_error,stringsAsFactors=FALSE)
MAE=MAE(predicted2,empirical)
d = empirical-predicted2
MSE = mean((d)^2)
RMSE=RMSE(predicted2, empirical)
R2=R2(predicted2, empirical, form = "traditional")
sim_error <- list(project=projects[i], mode="average",metric="density",MAE=MAE,MSE=MSE,RMSE=RMSE,R2=R2)
error <- rbind(error,sim_error,stringsAsFactors=FALSE)
#diameter
diameter <- results_p[,c(2,3,6)]
empirical<-diameter$diameter[diameter$mode=="empirical"]
predicted<-diameter$diameter[diameter$mode=="project-specific simulation"]
predicted2<-diameter$diameter[diameter$mode=="average simulation"]
MAE=MAE(predicted,empirical)
d = empirical-predicted
MSE = mean((d)^2)
RMSE=RMSE(predicted, empirical)
R2=R2(predicted, empirical, form = "traditional")
sim_error <- list(project=projects[i],mode="project-specific",metric="diameter",MAE=MAE,MSE=MSE,RMSE=RMSE,R2=R2)
error <- rbind(error,sim_error,stringsAsFactors=FALSE)
MAE=MAE(predicted2,empirical)
d = empirical-predicted2
MSE = mean((d)^2)
RMSE=RMSE(predicted2, empirical)
R2=R2(predicted2, empirical, form = "traditional")
sim_error <- list(project=projects[i], mode="average",metric="diameter",MAE=MAE,MSE=MSE,RMSE=RMSE,R2=R2)
error <- rbind(error,sim_error,stringsAsFactors=FALSE)
#NOC
commits <- reshaped[,c(1,5)]
empirical <- unique(commits)
empirical <- empirical$commits
commits_sim <- reshaped_sim[,c(1,5)]
commits_sim <- commits_sim[commits_sim$commits!=0,]
commits_sim_av <- reshaped_sim_av[,c(1,5)]
commits_sim_av <- commits_sim_av[commits_sim_av$commits!=0,]
predicted <- unique(commits_sim)
predicted <- predicted$commits
predicted2 <- unique(commits_sim_av)
predicted2 <- predicted2$commits
MAE=MAE(predicted,empirical)
d = empirical-predicted
MSE = mean((d)^2)
RMSE=RMSE(predicted, empirical)
R2=R2(predicted, empirical, form = "traditional")
sim_error <- list(project=projects[i],mode="project-specific",metric="NOC",MAE=MAE,MSE=MSE,RMSE=RMSE,R2=R2)
error <- rbind(error,sim_error,stringsAsFactors=FALSE)
MAE=MAE(predicted2,empirical)
d = empirical-predicted2
MSE = mean((d)^2)
RMSE=RMSE(predicted2, empirical)
R2=R2(predicted2, empirical, form = "traditional")
sim_error <- list(project=projects[i], mode="average",metric="NOC",MAE=MAE,MSE=MSE,RMSE=RMSE,R2=R2)
error <- rbind(error,sim_error,stringsAsFactors=FALSE)
#NOF
nodes <- results_p[,c(2,3,4)]
empirical<-nodes$nodes[nodes$mode=="empirical"]
predicted<-nodes$nodes[nodes$mode=="project-specific simulation"]
predicted2<-nodes$nodes[nodes$mode=="average simulation"]
MAE=MAE(predicted,empirical)
d = empirical-predicted
MSE = mean((d)^2)
RMSE=RMSE(predicted, empirical)
R2=R2(predicted, empirical, form = "traditional")
sim_error <- list(project=projects[i], mode="project-specific", metric="NOF",MAE=MAE,MSE=MSE,RMSE=RMSE,R2=R2)
error <- rbind(error,sim_error,stringsAsFactors=FALSE)
MAE=MAE(predicted2,empirical)
d = empirical-predicted2
MSE = mean((d)^2)
RMSE=RMSE(predicted2, empirical)
R2=R2(predicted2, empirical, form = "traditional")
sim_error <- list(project=projects[i], mode="average",metric="NOF",MAE=MAE,MSE=MSE,RMSE=RMSE,R2=R2)
error <- rbind(error,sim_error,stringsAsFactors=FALSE)
}
# error boxplot
View(error)
results <- na.omit(results)
p<-ggplot(error, aes(x=error$metric, y=error$MAE, fill=error$mode)) +
geom_boxplot()
print(p)
p<-ggplot(error, aes(x=metric, y=MAE, fill=mode))+geom_boxplot()
print(p)
results <- na.omit(results)
results_graph <- results[results$metric!="NOC"]
results_graph <- results[results$metric!="NOF"]
results_growth <- results[results$metric=="NOC"|results$metric=="NOF"]
View(results_graph)
View(error)
error <- na.omit(error)
error_graph <- error[error$metric!="NOC"]
error_graph <- error[error$metric!="NOF"]
error_growth <- error[error$metric=="NOC"|error$metric=="NOF"]
View(error)
error[error$metric!="NOC"]
error[error$metric!="NOC",]
error_graph <- error[error$metric!="NOC",]
error_graph <- error[error$metric!="NOF",]
error_growth <- error[error$metric=="NOC"|error$metric=="NOF",]
View(error_graph)
error_graph <- error[error$metric!="NOC"&error$metric!="NOF",]
p<-ggplot(error_graph, aes(x=metric, y=MAE, fill=mode))+geom_boxplot()
print(p)
p<-ggplot(error_growth, aes(x=metric, y=MAE, fill=mode))+geom_boxplot()
print(p)
p<-ggplot(error_graph, aes(x=metric, y=MSE, fill=mode))+geom_boxplot()
print(p)
p<-ggplot(error_growth, aes(x=metric, y=MSE, fill=mode))+geom_boxplot()
print(p)
p<-ggplot(error_graph, aes(x=metric, y=MSE, fill=mode))+geom_boxplot()+ylim(0,600)
print(p)
p<-ggplot(error_graph, aes(x=metric, y=MSE, fill=mode))+geom_boxplot()+ylim(0,500)
print(p)
p<-ggplot(error_graph, aes(x=metric, y=RMSE, fill=mode))+geom_boxplot()
print(p)
p<-ggplot(error_growth, aes(x=metric, y=RMSE, fill=mode))+geom_boxplot()
print(p)
#R2
p<-ggplot(error_graph, aes(x=metric, y=R2, fill=mode))+geom_boxplot()
print(p)
p<-ggplot(error_growth, aes(x=metric, y=R2, fill=mode))+geom_boxplot()
print(p)
