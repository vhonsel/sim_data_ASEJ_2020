diameter <- results_p[,c(2,3,6)]
empirical<-diameter$diameter[diameter$mode=="empirical"]
predicted<-diameter$diameter[diameter$mode=="project-specific simulation"]
predicted2<-diameter$diameter[diameter$mode=="average simulation"]
MAE=MAE(predicted,empirical)
d = empirical-predicted
MSE = mean((d)^2)
RMSE=RMSE(predicted, empirical)
rss <- sum((predicted - empirical) ^ 2)
tss <- sum((empirical - mean(empirical)) ^ 2)
R2<- 1 - rss/tss
sim_error <- list(project=projects[i],mode="project-specific",metric="diameter",MAE=MAE,MSE=MSE,RMSE=RMSE,R2=R2)
error <- rbind(error,sim_error,stringsAsFactors=FALSE)
MAE=MAE(predicted2,empirical)
d = empirical-predicted2
MSE = mean((d)^2)
RMSE=RMSE(predicted2, empirical)
rss <- sum((predicted2 - empirical) ^ 2)
R2<- 1 - rss/tss
sim_error <- list(project=projects[i], mode="average",metric="diameter",MAE=MAE,MSE=MSE,RMSE=RMSE,R2=R2)
error <- rbind(error,sim_error,stringsAsFactors=FALSE)
#NOC
empirical<-results_p_NOC$NOC[results_p_NOC$mode=="empirical"]
predicted<-results_p_NOC$NOC[results_p_NOC$mode=="project-specific simulation"]
predicted2<-results_p_NOC$NOC[results_p_NOC$mode=="average simulation"]
MAE=MAE(predicted,empirical)
d = empirical-predicted
MSE = mean((d)^2)
RMSE=RMSE(predicted, empirical)
rss <- sum((predicted - empirical) ^ 2)
tss <- sum((empirical - mean(empirical)) ^ 2)
R2<- 1 - rss/tss
sim_error <- list(project=projects[i],mode="project-specific",metric="NOC",MAE=MAE,MSE=MSE,RMSE=RMSE,R2=R2)
error <- rbind(error,sim_error,stringsAsFactors=FALSE)
MAE=MAE(predicted2,empirical)
d = empirical-predicted2
MSE = mean((d)^2)
RMSE=RMSE(predicted2, empirical)
rss <- sum((predicted2 - empirical) ^ 2)
R2<- 1 - rss/tss
sim_error <- list(project=projects[i], mode="average",metric="NOC",MAE=MAE,MSE=MSE,RMSE=RMSE,R2=R2)
error <- rbind(error,sim_error,stringsAsFactors=FALSE)
#NOF
nodes <- results_p[,c(2,3,4)]
empirical<-nodes$nodes[nodes$mode=="empirical"]
predicted<-nodes$nodes[nodes$mode=="project-specific simulation"]
predicted2<-nodes$nodes[nodes$mode=="average simulation"]
MAE=MAE(predicted,empirical)
d = empirical-predicted
MSE = mean((d)^2)
RMSE=RMSE(predicted, empirical)
rss <- sum((predicted - empirical) ^ 2)
tss <- sum((empirical - mean(empirical)) ^ 2)
R2<- 1 - rss/tss
sim_error <- list(project=projects[i], mode="project-specific", metric="NOF",MAE=MAE,MSE=MSE,RMSE=RMSE,R2=R2)
error <- rbind(error,sim_error,stringsAsFactors=FALSE)
MAE=MAE(predicted2,empirical)
d = empirical-predicted2
MSE = mean((d)^2)
RMSE=RMSE(predicted2, empirical)
rss <- sum((predicted2 - empirical) ^ 2)
R2<- 1 - rss/tss
sim_error <- list(project=projects[i], mode="average",metric="NOF",MAE=MAE,MSE=MSE,RMSE=RMSE,R2=R2)
error <- rbind(error,sim_error,stringsAsFactors=FALSE)
}
# error boxplot
error <- na.omit(error)
#error_graph <- error[error$metric!="NOC"&error$metric!="NOF",]
#error_growth <- error[error$metric=="NOC"|error$metric=="NOF",]
#MAE
p<-ggplot(error[error$metric=="av_degree",], aes(x=metric, y=MAE, fill=mode))+geom_boxplot()
print(p)
p<-ggplot(error[error$metric=="av_w_degree",], aes(x=metric, y=MAE, fill=mode))+geom_boxplot()
print(p)
p<-ggplot(error[error$metric=="density",], aes(x=metric, y=MAE, fill=mode))+geom_boxplot()
print(p)
p<-ggplot(error[error$metric=="modularity",], aes(x=metric, y=MAE, fill=mode))+geom_boxplot()
print(p)
p<-ggplot(error[error$metric=="diameter",], aes(x=metric, y=MAE, fill=mode))+geom_boxplot()
print(p)
p<-ggplot(error[error$metric=="NOC",], aes(x=metric, y=MAE, fill=mode))+geom_boxplot()
print(p)
p<-ggplot(error[error$metric=="NOF",], aes(x=metric, y=MAE, fill=mode))+geom_boxplot()
print(p)
#MSE
p<-ggplot(error[error$metric=="av_degree",], aes(x=metric, y=MSE, fill=mode))+geom_boxplot()
print(p)
p<-ggplot(error[error$metric=="av_w_degree",], aes(x=metric, y=MSE, fill=mode))+geom_boxplot()
print(p)
p<-ggplot(error[error$metric=="density",], aes(x=metric, y=MSE, fill=mode))+geom_boxplot()
print(p)
p<-ggplot(error[error$metric=="modularity",], aes(x=metric, y=MSE, fill=mode))+geom_boxplot()
print(p)
p<-ggplot(error[error$metric=="diameter",], aes(x=metric, y=MSE, fill=mode))+geom_boxplot()
print(p)
p<-ggplot(error[error$metric=="NOC",], aes(x=metric, y=MSE, fill=mode))+geom_boxplot()
print(p)
p<-ggplot(error[error$metric=="NOF",], aes(x=metric, y=MSE, fill=mode))+geom_boxplot()
print(p)
#RMSE
p<-ggplot(error[error$metric=="av_degree",], aes(x=metric, y=RMSE, fill=mode))+geom_boxplot()
print(p)
p<-ggplot(error[error$metric=="av_w_degree",], aes(x=metric, y=RMSE, fill=mode))+geom_boxplot()
print(p)
p<-ggplot(error[error$metric=="density",], aes(x=metric, y=RMSE, fill=mode))+geom_boxplot()
print(p)
p<-ggplot(error[error$metric=="modularity",], aes(x=metric, y=RMSE, fill=mode))+geom_boxplot()
print(p)
p<-ggplot(error[error$metric=="diameter",], aes(x=metric, y=RMSE, fill=mode))+geom_boxplot()
print(p)
p<-ggplot(error[error$metric=="NOC",], aes(x=metric, y=RMSE, fill=mode))+geom_boxplot()
print(p)
p<-ggplot(error[error$metric=="NOF",], aes(x=metric, y=RMSE, fill=mode))+geom_boxplot()
print(p)
#R2
#### test normality
# shapiro wilk
# bonferroni correction with n=32
# alpha = 0.00156
# MAE
#shapiro.test(error$MAE[error$metric=="av_degree"&error$mode=="average"])
#shapiro.test(error$MAE[error$metric=="av_degree"&error$mode=="project-specific"])
#shapiro.test(error$MAE[error$metric=="av_w_degree"&error$mode=="average"])
#shapiro.test(error$MAE[error$metric=="av_w_degree"&error$mode=="project-specific"])
shapiro.test(error$MAE[error$metric=="density"&error$mode=="average"])
shapiro.test(error$MAE[error$metric=="density"&error$mode=="project-specific"])
wilcox.test(error$MAE[error$metric=="density"&error$mode=="average"],
error$MAE[error$metric=="density"&error$mode=="project-specific"][-10], paired = TRUE)
shapiro.test(error$MAE[error$metric=="modularity"&error$mode=="average"])
shapiro.test(error$MAE[error$metric=="modularity"&error$mode=="project-specific"])
wilcox.test(error$MAE[error$metric=="modularity"&error$mode=="average"],
error$MAE[error$metric=="modularity"&error$mode=="project-specific"], paired = TRUE)
#shapiro.test(error$MAE[error$metric=="diameter"&error$mode=="average"])
#shapiro.test(error$MAE[error$metric=="diameter"&error$mode=="project-specific"])
shapiro.test(error$MAE[error$metric=="NOC"&error$mode=="average"])
shapiro.test(error$MAE[error$metric=="NOC"&error$mode=="project-specific"])
wilcox.test(error$MAE[error$metric=="NOC"&error$mode=="average"],
error$MAE[error$metric=="NOC"&error$mode=="project-specific"], paired = TRUE)
shapiro.test(error$MAE[error$metric=="NOF"&error$mode=="average"])
shapiro.test(error$MAE[error$metric=="NOF"&error$mode=="project-specific"])
wilcox.test(error$MAE[error$metric=="NOF"&error$mode=="average"],
error$MAE[error$metric=="NOF"&error$mode=="project-specific"], paired = TRUE)
# RMSE
#shapiro.test(error$MSE[error$metric=="av_degree"&error$mode=="average"])
#shapiro.test(error$MSE[error$metric=="av_degree"&error$mode=="project-specific"])
#shapiro.test(error$MSE[error$metric=="av_w_degree"&error$mode=="average"])
#shapiro.test(error$MSE[error$metric=="av_w_degree"&error$mode=="project-specific"])
shapiro.test(error$RMSE[error$metric=="density"&error$mode=="average"])
shapiro.test(error$RMSE[error$metric=="density"&error$mode=="project-specific"])
wilcox.test(error$RMSE[error$metric=="density"&error$mode=="average"],
error$RMSE[error$metric=="density"&error$mode=="project-specific"][-10], paired = TRUE)
shapiro.test(error$RMSE[error$metric=="modularity"&error$mode=="average"])
shapiro.test(error$RMSE[error$metric=="modularity"&error$mode=="project-specific"])
wilcox.test(error$RMSE[error$metric=="modularity"&error$mode=="average"],
error$RMSE[error$metric=="modularity"&error$mode=="project-specific"], paired = TRUE)
#shapiro.test(error$MSE[error$metric=="diameter"&error$mode=="average"])
#shapiro.test(error$MSE[error$metric=="diameter"&error$mode=="project-specific"])
shapiro.test(error$RMSE[error$metric=="NOC"&error$mode=="average"])
shapiro.test(error$RMSE[error$metric=="NOC"&error$mode=="project-specific"])
wilcox.test(error$RMSE[error$metric=="NOC"&error$mode=="average"],
error$RMSE[error$metric=="NOC"&error$mode=="project-specific"], paired = TRUE)
shapiro.test(error$RMSE[error$metric=="NOF"&error$mode=="average"])
shapiro.test(error$RMSE[error$metric=="NOF"&error$mode=="project-specific"])
wilcox.test(error$RMSE[error$metric=="NOF"&error$mode=="average"],
error$RMSE[error$metric=="NOF"&error$mode=="project-specific"], paired = TRUE)
# long-term vs. short-term prediction
for (j in 1:length(projects)) {
################# graph evolution ##################
setwd(paste("C:/Users/vhonsel/Documents/git/paper/ASE/SimSE_Data/",projects[j],"/simulated/snapshot",sep=""))
noy <- length(list.files (pattern = "dot$"))
years <- c("01","02","03","04","05","06","07","08","09","10","11","12","13","14","15","16","17","18")
length(years) <- noy
for (i in 1:length(years)) {
edges = read.csv(paste("ChangeCoupling_Edges_", projects[j],"_",years[i],".csv", sep=""), header=TRUE)
nodes = read.csv(paste("ChangeCoupling_Nodes_",projects[j],"_",years[i],".csv", sep=""), header=TRUE)
cc_graph <- graph.data.frame(edges, directed=FALSE, vertices=nodes$Id)
n <- length(V(cc_graph))
e <- length(E(cc_graph))
d <- diameter(cc_graph, directed=F, weights=NA)
deg <- igraph::degree(cc_graph, v= V(cc_graph), mode="all")
av_deg <- sum(deg)/n
cl <- cluster_louvain(cc_graph,weights=E(cc_graph)$weight)
mod <- modularity(cl)
E(cc_graph)$weight <- edges$Weight
w_deg <- strength(cc_graph, mode="all")
av_w_deg <- sum(w_deg)/n
Communities <- length(cl)
#cluster_sizes <- sizes(cl)
den <- edge_density(cc_graph, loops = FALSE)
metrics <- list(project=projects[j], mode= "snapshot", year = years[i], nodes=n, edges=e, diameter=d,
av_degree=av_deg, modularity=mod, av_w_degree=av_w_deg, communities=Communities, density = den)
results <- rbind(results,metrics,stringsAsFactors=FALSE)
#hist(deg, breaks =1:vcount(cc_graph)-1, main = "Histogram of node degree")
deg.dist <- degree_distribution(cc_graph, cumulative = T, mode="all")
#plot( x=0:max(deg), y=1-deg.dist, pch=19, cex=1.2, col="orange",xlab="Degree", ylab="Cumulative Frequency")
#commits_sim_ss <- read.delim(paste("sim_noc_",projects[j],".txt",sep=""), sep = ",", header=TRUE)
#for (k in 1:nrow(commits_sim_ss)) {
# commits_sim_ss$NOC[k] <- commits_sim_ss$key[k]+commits_sim_ss$major[k]+commits_sim_ss$minor[k]
#}
#names(commits_sim_ss)[1] <- "year"
}
}
# plots including snapshot simulation
results_project <- results[results$project==projects[j],]
#results_project <- results[results$project=="commons-collections",]
nodes_plot <- ggplot(results_project, aes(year, nodes))
np <- nodes_plot + geom_line(aes(group=mode,color=mode),size=1.5)+ylim(0,max(results_project$nodes)+100)+theme_set(theme_gray(base_size = 20))
print(np)
ggsave(np, file=paste(projects[j],"_nodes.png"), path = savedir)
dev.off()
edges_plot <- ggplot(results_project, aes(year, edges))
ep <- edges_plot + geom_line(aes(group=mode,color=mode),size=1.5)+ylim(0,max(results_project$edges)+1000)+theme_set(theme_gray(base_size = 20))
print(ep)
ggsave(ep, file=paste(projects[j],"_edges.png"), path = savedir)
dev.off()
############# modularity with snapshot
results_project <- results_project[-c(40,41,42,43),]
mod_plot <- ggplot(results_project, aes(year, modularity))
mp <- mod_plot + geom_line(aes(group=mode,color=mode),size=1.5)+ylim(0,1)+theme_set(theme_gray(base_size = 20))+geom_vline(xintercept=5, colour="grey",size=1.5)+
geom_text(aes(3,0.75,label = "snapshot offset", vjust = -1), size=5, colour="grey")
print(mp)
#############
mod_plot <- ggplot(results_project, aes(year, modularity))
mp <- mod_plot + geom_line(aes(group=mode,color=mode),size=1.5)+ylim(0,1)+theme_set(theme_gray(base_size = 20))
print(mp)
ggsave(mp, file=paste(projects[j],"_modularity.png"), path = savedir)
dev.off()
dia_plot <- ggplot(results_project, aes(year, diameter))
dp <- dia_plot + geom_line(aes(group=mode,color=mode),size=1.5)+ylim(0,max(results_project$diameter)+1)+theme_set(theme_gray(base_size = 20))
print(dp)
ggsave(dp, file=paste(projects[j],"_diameter.png"), path = savedir)
dev.off()
deg_plot <- ggplot(results_project, aes(year, av_degree))
degp <- deg_plot + geom_line(aes(group=mode,color=mode),size=1.5)+ylim(0,max(results_project$av_degree)+10)+
ylab("average degree")+theme_set(theme_gray(base_size = 20))
print(degp)
ggsave(degp, file=paste(projects[j],"_av_degree.png"), path = savedir)
dev.off()
wdeg_plot <- ggplot(results_project, aes(year, av_w_degree))
wp <- wdeg_plot + geom_line(aes(group=mode,color=mode),size=1.5)+ylim(0,max(results_project$av_w_degree)+10)+
ylab("average weighted degree")+theme_set(theme_gray(base_size = 20))
print(wp)
ggsave(wp, file=paste(projects[j],"_av_w_degree.png"), path = savedir)
dev.off()
#dens_plot <- ggplot(results_project, aes(year, density))
#denp <- dens_plot + geom_line(aes(group=mode,color=mode),size=1.5)+ylim(0,1)+theme_set(theme_gray(base_size = 20))+ylim(0,0.8)+
#geom_vline(xintercept=4, colour="grey",size=1.5)+geom_text(aes(3,0.15,label = "snapshot offset", vjust = -1), size=5, colour="grey")
#print(denp)
#ggsave(denp, file=paste(projects[j],"_density.png"), path = savedir)
#dev.off()
#noc_plot <- ggplot(results_p_NOC, aes(year, NOC))
#nocp <- noc_plot + geom_line(aes(group=mode,color=mode),size=1.5)+theme_set(theme_gray(base_size = 20))+
#print(nocp)
#ggsave(soc, file=paste(projects[j],"_commits_summarized.png"), path = savedir)
#dev.off()
# snapshot error
error_snapshot <- data.frame(project=character(), mode=character(), metric=character(), MAE=numeric(), RMSE=numeric(), stringsAsFactors = FALSE)
for (i in 1:length(projects)){
results_p <- results[results$project==projects[i],]
results_p_NOC <- results_commits[results_commits$project==projects[i],]
offset <- min(results_p_NOC$year[results_p_NOC$mode=="snapshot simulation"])
offset_value <- results_p_NOC$NOC[results_p_NOC$mode=="empirical"&results_p_NOC$year==offset-1]
for (j in 1:nrow(results_p_NOC)){
if (results_p_NOC$mode[j]=="snapshot simulation") {
results_p_NOC$NOC[j] <- results_p_NOC$NOC[j]+offset_value
}
}
### modularity
modularity <- results_p[,c(2,3,8)]
empirical<-modularity$modularity[modularity$mode=="empirical"]
predicted<-modularity$modularity[modularity$mode=="project-specific simulation"]
predicted2<-modularity$modularity[modularity$mode=="snapshot"]
MAE=MAE(predicted,empirical)
RMSE=RMSE(predicted, empirical)
sim_error <- list(project=projects[i], mode="project-specific", metric="modularity",MAE=MAE,RMSE=RMSE)
error_snapshot <- rbind(error_snapshot,sim_error,stringsAsFactors=FALSE)
#start comparison after snapshot initialization
temp <- length(predicted2[predicted2==0])
predicted2 <- predicted2[predicted2!=0]
empirical <- empirical[temp+1:length(empirical)]
length(empirical)<-length(predicted2)
MAE=MAE(predicted2,empirical)
RMSE=RMSE(predicted2, empirical)
sim_error <- list(project=projects[i], mode="snapshot", metric="modularity",MAE=MAE,RMSE=RMSE)
error_snapshot <- rbind(error_snapshot,sim_error,stringsAsFactors=FALSE)
### density
# omit first obs for density since it is initialized with 1
density <- results_p[,c(2,3,11)]
empirical<-density$density[density$mode=="empirical"]
predicted<-density$density[density$mode=="project-specific simulation"]
empirical<-empirical[2:length(empirical)]
predicted<-predicted[2:length(predicted)]
predicted2<-density$density[density$mode=="snapshot"]
MAE=MAE(predicted,empirical)
RMSE=RMSE(predicted, empirical)
sim_error <- list(project=projects[i], mode="project-specific", metric="density",MAE=MAE,RMSE=RMSE)
error_snapshot <- rbind(error_snapshot,sim_error,stringsAsFactors=FALSE)
#start comparison after snapshot initialization
temp <- length(predicted2[predicted2==1])
predicted2 <- predicted2[predicted2!=1]
empirical <- empirical[temp:length(empirical)]
length(empirical)<-length(predicted2)
MAE=MAE(predicted2,empirical)
RMSE=RMSE(predicted2, empirical)
sim_error <- list(project=projects[i], mode="snapshot", metric="density",MAE=MAE,RMSE=RMSE)
error_snapshot <- rbind(error_snapshot,sim_error,stringsAsFactors=FALSE)
### NOC
empirical<-results_p_NOC$NOC[results_p_NOC$mode=="empirical"]
predicted<-results_p_NOC$NOC[results_p_NOC$mode=="project-specific simulation"]
predicted2<-results_p_NOC$NOC[results_p_NOC$mode=="snapshot simulation"]
MAE=MAE(predicted,empirical)
RMSE=RMSE(predicted, empirical)
sim_error <- list(project=projects[i],mode="project-specific",metric="NOC",MAE=MAE,RMSE=RMSE)
error_snapshot <- rbind(error_snapshot,sim_error,stringsAsFactors=FALSE)
#start comparison after snapshot initialization
temp <- length(predicted2[predicted2!=0])
predicted2 <- predicted2[predicted2!=0]
empirical <- empirical[(length(empirical)-length(predicted2)+1):length(empirical)]
MAE=MAE(predicted2,empirical)
RMSE=RMSE(predicted2, empirical)
sim_error <- list(project=projects[i], mode="snapshot", metric="NOC",MAE=MAE,RMSE=RMSE)
error_snapshot <- rbind(error_snapshot,sim_error,stringsAsFactors=FALSE)
### NOF
nodes <- results_p[,c(2,3,4)]
empirical<-nodes$nodes[nodes$mode=="empirical"]
predicted<-nodes$nodes[nodes$mode=="project-specific simulation"]
predicted2<-nodes$nodes[nodes$mode=="snapshot"]
MAE=MAE(predicted,empirical)
RMSE=RMSE(predicted, empirical)
sim_error <- list(project=projects[i],mode="project-specific",metric="NOF",MAE=MAE,RMSE=RMSE)
error_snapshot <- rbind(error_snapshot,sim_error,stringsAsFactors=FALSE)
#start comparison after snapshot initialization
temp <- length(predicted2[predicted2!=2])
predicted2 <- predicted2[predicted2!=2]
empirical <- empirical[(length(empirical)-length(predicted2)+1):length(empirical)]
MAE=MAE(predicted2,empirical)
RMSE=RMSE(predicted2, empirical)
sim_error <- list(project=projects[i], mode="snapshot", metric="NOF",MAE=MAE,RMSE=RMSE)
error_snapshot <- rbind(error_snapshot,sim_error,stringsAsFactors=FALSE)
}
p<-ggplot(error_snapshot[error_snapshot$metric=="density",], aes(x=metric, y=MAE, fill=mode))+geom_boxplot()
print(p)
p<-ggplot(error_snapshot[error_snapshot$metric=="modularity",], aes(x=metric, y=MAE, fill=mode))+geom_boxplot()
print(p)
p<-ggplot(error_snapshot[error_snapshot$metric=="NOC",], aes(x=metric, y=MAE, fill=mode))+geom_boxplot()
print(p)
p<-ggplot(error_snapshot[error_snapshot$metric=="NOF",], aes(x=metric, y=MAE, fill=mode))+geom_boxplot()
print(p)
density <- results_p[,c(2,3,11)]
empirical<-density$density[density$mode=="empirical"]
predicted<-density$density[density$mode=="project-specific simulation"]
empirical<-empirical[2:length(empirical)]
predicted<-predicted[2:length(predicted)]
predicted2<-density$density[density$mode=="snapshot"]
empirical
predicted
predicted2
temp <- length(predicted2[predicted2==1])
predicted2 <- predicted2[predicted2!=1]
empirical <- empirical[temp:length(empirical)]
length(empirical)<-length(predicted2)
empirical
predicted2
nodes <- results_p[,c(2,3,4)]
empirical<-nodes$nodes[nodes$mode=="empirical"]
predicted<-nodes$nodes[nodes$mode=="project-specific simulation"]
predicted2<-nodes$nodes[nodes$mode=="snapshot"]
temp <- length(predicted2[predicted2!=2])
predicted2 <- predicted2[predicted2!=2]
empirical <- empirical[(length(empirical)-length(predicted2)+1):length(empirical)]
empirical
predicted2
p<-ggplot(error_snapshot[error_snapshot$metric=="NOF",], aes(x=metric, y=MAE, fill=mode))+geom_boxplot()
print(p)
p<-ggplot(error_snapshot[error_snapshot$metric=="NOC",], aes(x=metric, y=RMSE, fill=mode))+geom_boxplot()
print(p)
p<-ggplot(error_snapshot[error_snapshot$metric=="NOF",], aes(x=metric, y=RMSE, fill=mode))+geom_boxplot()
print(p)
shapiro.test(error_snapshot$MAE[error_snapshot$metric=="NOC"&error_snapshot$mode=="snapshot"])
shapiro.test(error_snapshot$MAE[error_snapshot$metric=="NOC"&error_snapshot$mode=="project-specific"])
hapiro.test(error_snapshot$MAE[error_snapshot$metric=="NOF"&error_snapshot$mode=="snapshot"])
shapiro.test(error_snapshot$MAE[error_snapshot$metric=="NOF"&error_snapshot$mode=="project-specific"])
shapiro.test(error_snapshot$MAE[error_snapshot$metric=="NOF"&error_snapshot$mode=="snapshot"])
shapiro.test(error_snapshot$MAE[error_snapshot$metric=="density"&error_snapshot$mode=="snapshot"])
shapiro.test(error_snapshot$MAE[error_snapshot$metric=="density"&error_snapshot$mode=="project-specific"])
shapiro.test(error_snapshot$MAE[error_snapshot$metric=="modularity"&error_snapshot$mode=="snapshot"])
shapiro.test(error_snapshot$MAE[error_snapshot$metric=="modularity"&error_snapshot$mode=="project-specific"])
shapiro.test(error_snapshot$MAE[error_snapshot$metric=="NOC"&error_snapshot$mode=="snapshot"])
shapiro.test(error_snapshot$MAE[error_snapshot$metric=="NOC"&error_snapshot$mode=="project-specific"])
shapiro.test(error_snapshot$MAE[error_snapshot$metric=="NOF"&error_snapshot$mode=="snapshot"])
shapiro.test(error_snapshot$MAE[error_snapshot$metric=="NOF"&error_snapshot$mode=="project-specific"])
shapiro.test(error_snapshot$RMSE[error_snapshot$metric=="density"&error_snapshot$mode=="snapshot"])
shapiro.test(error_snapshot$RMSE[error_snapshot$metric=="density"&error_snapshot$mode=="project-specific"])
shapiro.test(error_snapshot$RMSE[error_snapshot$metric=="modularity"&error_snapshot$mode=="snapshot"])
shapiro.test(error_snapshot$RMSE[error_snapshot$metric=="modularity"&error_snapshot$mode=="project-specific"])
shapiro.test(error_snapshot$RMSE[error_snapshot$metric=="NOC"&error_snapshot$mode=="snapshot"])
shapiro.test(error_snapshot$RMSE[error_snapshot$metric=="NOC"&error_snapshot$mode=="project-specific"])
shapiro.test(error_snapshot$RMSE[error_snapshot$metric=="NOF"&error_snapshot$mode=="snapshot"])
shapiro.test(error_snapshot$RMSE[error_snapshot$metric=="NOF"&error_snapshot$mode=="project-specific"])
shapiro.test(error_snapshot$MAE[error_snapshot$metric=="density"&error_snapshot$mode=="snapshot"])
shapiro.test(error_snapshot$MAE[error_snapshot$metric=="density"&error_snapshot$mode=="project-specific"])
shapiro.test(error_snapshot$MAE[error_snapshot$metric=="modularity"&error_snapshot$mode=="snapshot"])
shapiro.test(error_snapshot$MAE[error_snapshot$metric=="modularity"&error_snapshot$mode=="project-specific"])
shapiro.test(error_snapshot$MAE[error_snapshot$metric=="NOC"&error_snapshot$mode=="snapshot"])
shapiro.test(error_snapshot$MAE[error_snapshot$metric=="NOC"&error_snapshot$mode=="project-specific"])
shapiro.test(error_snapshot$MAE[error_snapshot$metric=="NOF"&error_snapshot$mode=="snapshot"])
shapiro.test(error_snapshot$MAE[error_snapshot$metric=="NOF"&error_snapshot$mode=="project-specific"])
shapiro.test(error_snapshot$RMSE[error_snapshot$metric=="density"&error_snapshot$mode=="snapshot"])
shapiro.test(error_snapshot$RMSE[error_snapshot$metric=="density"&error_snapshot$mode=="project-specific"])
shapiro.test(error_snapshot$RMSE[error_snapshot$metric=="modularity"&error_snapshot$mode=="snapshot"])
shapiro.test(error_snapshot$RMSE[error_snapshot$metric=="modularity"&error_snapshot$mode=="project-specific"])
shapiro.test(error_snapshot$RMSE[error_snapshot$metric=="NOC"&error_snapshot$mode=="snapshot"])
shapiro.test(error_snapshot$RMSE[error_snapshot$metric=="NOC"&error_snapshot$mode=="project-specific"])
shapiro.test(error_snapshot$RMSE[error_snapshot$metric=="NOF"&error_snapshot$mode=="snapshot"])
shapiro.test(error_snapshot$RMSE[error_snapshot$metric=="NOF"&error_snapshot$mode=="project-specific"])
wilcox.test(error_snapshot$MAE[error_snapshot$metric=="density"&error_snapshot$mode=="snapshot"],
error_snapshot$MAE[error_snapshot$metric=="density"&error_snapshot$mode=="project-specific"], paired = TRUE)
wilcox.test(error_snapshot$MAE[error_snapshot$metric=="modularity"&error_snapshot$mode=="snapshot"],
error_snapshot$MAE[error_snapshot$metric=="modularity"&error_snapshot$mode=="project-specific"], paired = TRUE)
shapiro.test(error_snapshot$MAE[error_snapshot$metric=="density"&error_snapshot$mode=="snapshot"])
shapiro.test(error_snapshot$MAE[error_snapshot$metric=="density"&error_snapshot$mode=="project-specific"])
shapiro.test(error_snapshot$MAE[error_snapshot$metric=="modularity"&error_snapshot$mode=="snapshot"])
shapiro.test(error_snapshot$MAE[error_snapshot$metric=="modularity"&error_snapshot$mode=="project-specific"])
shapiro.test(error_snapshot$MAE[error_snapshot$metric=="NOC"&error_snapshot$mode=="snapshot"])
shapiro.test(error_snapshot$MAE[error_snapshot$metric=="NOC"&error_snapshot$mode=="project-specific"])
shapiro.test(error_snapshot$MAE[error_snapshot$metric=="NOF"&error_snapshot$mode=="snapshot"])
shapiro.test(error_snapshot$MAE[error_snapshot$metric=="NOF"&error_snapshot$mode=="project-specific"])
shapiro.test(error_snapshot$RMSE[error_snapshot$metric=="density"&error_snapshot$mode=="snapshot"])
shapiro.test(error_snapshot$RMSE[error_snapshot$metric=="density"&error_snapshot$mode=="project-specific"])
shapiro.test(error_snapshot$RMSE[error_snapshot$metric=="modularity"&error_snapshot$mode=="snapshot"])
shapiro.test(error_snapshot$RMSE[error_snapshot$metric=="modularity"&error_snapshot$mode=="project-specific"])
shapiro.test(error_snapshot$RMSE[error_snapshot$metric=="NOC"&error_snapshot$mode=="snapshot"])
shapiro.test(error_snapshot$RMSE[error_snapshot$metric=="NOC"&error_snapshot$mode=="project-specific"])
shapiro.test(error_snapshot$RMSE[error_snapshot$metric=="NOF"&error_snapshot$mode=="snapshot"])
shapiro.test(error_snapshot$RMSE[error_snapshot$metric=="NOF"&error_snapshot$mode=="project-specific"])
wilcox.test(error_snapshot$MAE[error_snapshot$metric=="density"&error_snapshot$mode=="snapshot"],
error_snapshot$MAE[error_snapshot$metric=="density"&error_snapshot$mode=="project-specific"], paired = TRUE)
wilcox.test(error_snapshot$MAE[error_snapshot$metric=="modularity"&error_snapshot$mode=="snapshot"],
error_snapshot$MAE[error_snapshot$metric=="modularity"&error_snapshot$mode=="project-specific"], paired = TRUE)
wilcox.test(error_snapshot$MAE[error_snapshot$metric=="NOC"&error_snapshot$mode=="snapshot"],
error_snapshot$MAE[error_snapshot$metric=="NOC"&error_snapshot$mode=="project-specific"], paired = TRUE)
wilcox.test(error_snapshot$MAE[error_snapshot$metric=="NOF"&error_snapshot$mode=="snapshot"],
error_snapshot$MAE[error_snapshot$metric=="NOF"&error_snapshot$mode=="project-specific"], paired = TRUE)
wilcox.test(error_snapshot$RMSE[error_snapshot$metric=="density"&error_snapshot$mode=="snapshot"],
error_snapshot$RMSE[error_snapshot$metric=="density"&error_snapshot$mode=="project-specific"], paired = TRUE)
wilcox.test(error_snapshot$RMSE[error_snapshot$metric=="modularity"&error_snapshot$mode=="snapshot"],
error_snapshot$RMSE[error_snapshot$metric=="modularity"&error_snapshot$mode=="project-specific"], paired = TRUE)
wilcox.test(error_snapshot$RMSE[error_snapshot$metric=="NOC"&error_snapshot$mode=="snapshot"],
error_snapshot$RMSE[error_snapshot$metric=="NOC"&error_snapshot$mode=="project-specific"], paired = TRUE)
wilcox.test(error_snapshot$RMSE[error_snapshot$metric=="NOF"&error_snapshot$mode=="snapshot"],
error_snapshot$RMSE[error_snapshot$metric=="NOF"&error_snapshot$mode=="project-specific"], paired = TRUE)
median(error_snapshot$RMSE[error_snapshot$metric=="NOC"&error_snapshot$mode=="snapshot"])
median((error_snapshot$MAE[error_snapshot$metric=="NOC"&error_snapshot$mode=="snapshot"]))
median((error_snapshot$MAE[error_snapshot$metric=="NOC"&error_snapshot$mode=="project-specific"]))
median((error_snapshot$MAE[error_snapshot$metric=="NOF"&error_snapshot$mode=="snapshot"]))
median(error_snapshot$MAE[error_snapshot$metric=="NOF"&error_snapshot$mode=="project-specific"])
median(error_snapshot$RMSE[error_snapshot$metric=="NOC"&error_snapshot$mode=="snapshot"])
median(error_snapshot$RMSE[error_snapshot$metric=="NOC"&error_snapshot$mode=="project-specific"])
median(error_snapshot$RMSE[error_snapshot$metric=="NOF"&error_snapshot$mode=="snapshot"])
median(error_snapshot$RMSE[error_snapshot$metric=="NOF"&error_snapshot$mode=="project-specific"])
View(results_p_NOC)
noc_plot <- ggplot(results_p_NOC, aes(year, NOC))
nocp <- noc_plot + geom_line(aes(group=mode,color=mode),size=1.5)+theme_set(theme_gray(base_size = 20))+
print(nocp)
noc_plot <- ggplot(results_p_NOC, aes(year, NOC))
nocp <- noc_plot + geom_line(aes(group=mode,color=mode),size=1.5)+theme_set(theme_gray(base_size = 20))
print(nocp)
View(results_p_NOC)
results_p_NOC <- results_commits[results_commits$project=="jspwiki",]
noc_plot <- ggplot(results_p_NOC, aes(year, NOC))
nocp <- noc_plot + geom_line(aes(group=mode,color=mode),size=1.5)+theme_set(theme_gray(base_size = 20))
print(nocp)
offset <- min(results_p_NOC$year[results_p_NOC$mode=="snapshot simulation"])
offset_value <- results_p_NOC$NOC[results_p_NOC$mode=="empirical"&results_p_NOC$year==offset-1]
for (j in 1:nrow(results_p_NOC)){
if (results_p_NOC$mode[j]=="snapshot simulation") {
results_p_NOC$NOC[j] <- results_p_NOC$NOC[j]+offset_value
}
}
noc_plot <- ggplot(results_p_NOC, aes(year, NOC))
nocp <- noc_plot + geom_line(aes(group=mode,color=mode),size=1.5)+theme_set(theme_gray(base_size = 20))
print(nocp)
results_p_NOC <- results_commits[results_commits$project=="giraph",]
offset <- min(results_p_NOC$year[results_p_NOC$mode=="snapshot simulation"])
offset_value <- results_p_NOC$NOC[results_p_NOC$mode=="empirical"&results_p_NOC$year==offset-1]
for (j in 1:nrow(results_p_NOC)){
if (results_p_NOC$mode[j]=="snapshot simulation") {
results_p_NOC$NOC[j] <- results_p_NOC$NOC[j]+offset_value
}
}
noc_plot <- ggplot(results_p_NOC, aes(year, NOC))
nocp <- noc_plot + geom_line(aes(group=mode,color=mode),size=1.5)+theme_set(theme_gray(base_size = 20))
print(nocp)
results_p_NOC <- results_commits[results_commits$project=="directory-fortress-core",]
results_p_NOC <- results_commits[results_commits$project=="directory fortress-core",]
results_p_NOC <- results_commits[results_commits$project=="directory-fotress-core",]
offset <- min(results_p_NOC$year[results_p_NOC$mode=="snapshot simulation"])
offset_value <- results_p_NOC$NOC[results_p_NOC$mode=="empirical"&results_p_NOC$year==offset-1]
for (j in 1:nrow(results_p_NOC)){
if (results_p_NOC$mode[j]=="snapshot simulation") {
results_p_NOC$NOC[j] <- results_p_NOC$NOC[j]+offset_value
}
}
noc_plot <- ggplot(results_p_NOC, aes(year, NOC))
nocp <- noc_plot + geom_line(aes(group=mode,color=mode),size=1.5)+theme_set(theme_gray(base_size = 20))
print(nocp)
edges_plot <- ggplot(results_project, aes(year, edges))
ep <- edges_plot + geom_line(aes(group=mode,color=mode),size=1.5)+ylim(0,max(results_project$edges)+1000)+theme_set(theme_gray(base_size = 20))
print(ep)
nodes_plot <- ggplot(results_project, aes(year, nodes))
np <- nodes_plot + geom_line(aes(group=mode,color=mode),size=1.5)+ylim(0,max(results_project$nodes)+100)+theme_set(theme_gray(base_size = 20))
print(np)
